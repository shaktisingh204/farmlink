
'use server';

import { db } from '@/lib/firebase';
import { ref, get, query, orderByChild, equalTo } from 'firebase/database';

export interface Alert {
    id: string;
    type: 'new_order' | 'low_stock' | 'price_change' | 'general';
    message: string;
    timestamp: string;
    isRead: boolean;
    link?: string;
    userId: string;
}

// In a real application, alerts would be generated by other actions (e.g., creating an order).
// For this prototype, we'll return a set of sample alerts if the user has none.
const sampleAlerts = (userId: string): Alert[] => ([
    {
        id: 'alert1',
        userId,
        type: 'new_order',
        message: 'New order received for Organic Tomatoes from FreshMart.',
        timestamp: new Date(Date.now() - 1000 * 60 * 30).toISOString(), // 30 mins ago
        isRead: false,
        link: '/farmer-dashboard/orders-received',
    },
    {
        id: 'alert2',
        userId,
        type: 'low_stock',
        message: 'Your listing for Gala Apples is low on stock (10 kg remaining).',
        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(), // 2 hours ago
        isRead: false,
        link: '/farmer-dashboard/my-produce-listings',
    },
    {
        id: 'alert3',
        userId,
        type: 'price_change',
        message: 'The average market price for Carrots has increased by 8%. Consider updating your listing.',
        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(), // 1 day ago
        isRead: true,
        link: '/farmer-dashboard/market-prices',
    },
     {
        id: 'alert4',
        userId,
        type: 'general',
        message: 'Welcome to your new alerts dashboard!',
        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 48).toISOString(), // 2 days ago
        isRead: true,
    }
]);


export async function getAlertsForFarmer(farmerId: string): Promise<{ alerts?: Alert[], error?: string }> {
    if (!farmerId) {
        return { error: 'User not authenticated.' };
    }

    try {
        const alertsRef = ref(db, 'alerts');
        const q = query(alertsRef, orderByChild('userId'), equalTo(farmerId));
        const snapshot = await get(q);

        if (snapshot.exists()) {
            const data = snapshot.val();
            const alertsList = Object.keys(data).map(key => ({
                id: key,
                ...data[key]
            })).sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
            return { alerts: alertsList };
        }
        
        // Return sample alerts if no real alerts exist for the user yet
        return { alerts: sampleAlerts(farmerId) };

    } catch (error) {
        console.error("Error fetching alerts:", error);
        return { error: "Failed to fetch alerts from the database." };
    }
}
